// 10_07.cpp: определяет точку входа для консольного приложения.
//

/*Модифицируйте класс person из программы PERSORT этой главы так, что- бы он включал в себя не только имя человека, 
но и сведения о его зарпла- те в виде поля salary типа float. Вам будет необходимо изменить методы setName() и printName() 
на setData() и printData(), включив в них возмож- ность ввода и вывода значения salary, как это можно сделать с именем. 
Вам также понадобится метод getSalary(). Используя указатели, напишите функцию salsort(), которая сортирует указатели 
массива persPtr по значе- ниям зарплаты. Попробуйте вместить всю сортировку в функцию salsort(), не вызывая других функций, 
как это сделано в программе PERSORT. При этом не забывайте, что операция -> имеет больший приоритет, чем опера- ция *, и вам нужно будет написать
if((*(pp + j))->getSalary() > (*(pp + k))->getSalary()) {  меняем указатели местами  }*/

#include "stdafx.h"
#include <iostream>
#include <string>
#include "person.h"
#include "bsort.h"
#include "salsort.h"

using namespace std;

int main() 
{
	setlocale(LC_ALL, "rus");
	person* persPtr[100]; // массив указателей на person
	int n = 0; // количество элементов в массиве
	char choice; // переменная для ввода символа

	do
	{
		persPtr[n] = new person; // создаем новый объект
		persPtr[n]->setData(); // вводим имя
		n++; // увеличиваем количество
		cout << "Продолжаем ввод (y/n)?"; // спрашиваем, закончен ли ввод
		cin >> choice;
	} while (choice == 'y');

	cout << "\nНеотсортированный список:";
	for (int j = 0; j < n; j++) // покажем неотсортированный список
	persPtr[j]->printData();

	bsort(persPtr, n); // отсортируем указатели

	cout << "\nОтсортированный по именам список:";
	for (int j = 0; j < n; j++) // покажем отсортированный список
		persPtr[j]->printData();

	salsort(persPtr, n);

	cout << "\nОтсортированный по зарплатам список:";
	for (int j = 0; j < n; j++) // покажем отсортированный список
		persPtr[j]->printData();


	system("pause");
	return 0;
}